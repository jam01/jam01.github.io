<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>josemontoya.io</title><link>https://josemontoya.io/</link><description>Recent content on josemontoya.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://josemontoya.io/index.xml" rel="self" type="application/rss+xml"/><item><title>The Problem with API-Led - Part 2</title><link>https://josemontoya.io/blog/the-problem-with-api-led-part-2/</link><pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate><guid>https://josemontoya.io/blog/the-problem-with-api-led-part-2/</guid><description>In the first part of this series, I talked about the issues around the name &amp;ldquo;API-Led.&amp;rdquo; For some time, I thought we could address this problem by clarifying further what API-Led is and isn&amp;rsquo;t and proposing a different name. In fact, during our time at MS3, my friend Josh Erney (the DataWeave guru) and I collaborated to clarify what an API-Led implementation should look like. Alas, the article never came to light.</description></item><item><title>The Problem with API-Led - Part 1</title><link>https://josemontoya.io/blog/the-problem-with-api-led-part-1/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><guid>https://josemontoya.io/blog/the-problem-with-api-led-part-1/</guid><description>In my years of helping organizations with modernization or API-enablement through integration, I constantly interact with Mulesoft&amp;rsquo;s API-Led architectural pattern proponents. Either because they sincerely believe in its technical merits or because some variation of it was given to us from above.
If you&amp;rsquo;ve worked with me in the past, you know that API-Led is not anywhere near the top of my go-to patterns, to put it politely.
I&amp;rsquo;ll usually engage honestly in a discussion around the applicability and limitations of the pattern based on my experience and that of other thought leaders in this space.</description></item><item><title>About</title><link>https://josemontoya.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://josemontoya.io/about/</guid><description>Jose Montoya is an outcomes oriented Solutions Architect consultant. With 10 years of professional experience he&amp;rsquo;s worked for multiple companies of every size and of various industries, always delivering customer value by working alongside stakeholders at different organizational levels. Jose specializes in Enterprise Integration and Cloud Native solutions.
Software Skills Strategic Technical Discovery and Lifecycle Domain Driven Design Java &amp;amp; Scala Agile practices REST API design Python Scrum framework Enterprise Integration Patterns Spring Boot &amp;amp; Framework Goal oriented req.</description></item><item><title>Services</title><link>https://josemontoya.io/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://josemontoya.io/services/</guid><description>It is a badly kept secret that the most challenging aspect of developing Software is not writing the code, but drafting accurate specification, design, and testing of the code.
Because of these challenges, companies that want to offer compelling and modern digital services need to make strategic decisions on where to Buy vs Build their Software. Companies that choose Off The Shelf solutions wisely circumvent those challenges where there&amp;rsquo;s little value, and can focus their effort on more valuable and differentiating assets.</description></item></channel></rss>